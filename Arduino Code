#define MAX_STACK_SIZE 100 // Adjust the size according to your needs

// #include <SoftwareSerial.h>

// Define the RX and TX pins for communication with ESP8266
// #define ESP8266_TX 1   // Arduino RX pin connected to ESP8266 TX pin
// #define ESP8266_RX 0   // Arduino TX pin connected to ESP8266 RX pin

// Create a SoftwareSerial object for communication with ESP8266
// SoftwareSerial espSerial(ESP8266_RX, ESP8266_TX);

// int incomingByte = 0;-

template <class T>
class Stack {
private:
    T stackArray[MAX_STACK_SIZE];
    int top;

public:
    Stack() {
        top = -1;
    }

    void push(T item) {
        if (top >= MAX_STACK_SIZE - 1) {
            Serial.println("Stack overflow!");
            return;
        }
        stackArray[++top] = item;
    }

    T pop() {
        if (top < 0) {
            Serial.println("Stack underflow!");
            return T(); // Return default value for type T
        }
        return stackArray[top--];
    }

    T peek() {
        if (top < 0) {
            Serial.println("Stack is empty!");
            return T(); // Return default value for type T
        }
        return stackArray[top];
    }

    bool isEmpty() {
        return top < 0;
    }
};

Stack<char> operators; // Stack to hold operators
Stack<double> operands;   // Stack to hold operands

double operate(double a, double b, char op) {
    switch(op) {
        case '+':
            // analogWrite(A0, a);
            // analogWrite(A1, b);
            return (a+b);
        case '-':
            // analogWrite(A2, a);
            // analogWrite(A3, b);
            return (a-b);
        case '*':
            // analogWrite(A4, a);
            // analogWrite(A5, b);
            return (a*b);
        // case '/':
        //     return a / b;
        // case '^':
        //     return a ^ b;
        // Add more cases for other operators as needed
        default:
            return 0; // Handle invalid operator
    }
}

int evaluateExpression(String expression) {
    for(int i = 0; i < expression.length(); i++) {
        char token = expression[i];
        int flag = 0;
        if(isdigit(token)) {
            double operand1 = 0;
            double operand2 = 0;
            while(i < expression.length() && (isdigit(expression[i]) || expression[i] == '.')) {
              if(!flag && isdigit(expression[i])) operand1 = operand1 * 10 + (expression[i++] - '0');
              else if(flag && isdigit(expression[i])) operand2 = operand2 * 10 + (expression[i++] - '0');
              else flag = i++;
            }
            i--;
            if (flag != 0){
              int c = i - flag;
              int divi = 1;
              while(!c){
                divi *= 10;
                c--;
              }
              operand2 /= divi;
            }
            operands.push(operand1 + operand2);
        }
        else if(token == '(') {
            operators.push(token);
        }
        else if(token == ')') {
            while(!operators.isEmpty() && operators.peek() != '(') {
                char op = operators.pop();
                double b = operands.pop();
                double a = operands.pop();
                operands.push(operate(a, b, op));
            }
            if(!operators.isEmpty())operators.pop(); // Pop '('
        }
        else if(token == '+' || token == '-' || token == '*' || token == '/') {
            while(!operators.isEmpty() && precedence(operators.peek()) >= precedence(token)) {
                char op = operators.pop();
                double b = operands.pop();
                double a = operands.pop();
                operands.push(operate(a, b, op));
            }
            operators.push(token);
        }
    }
    while(!operators.isEmpty()) {
        char op = operators.pop();
        double b = operands.pop();
        double a = operands.pop();
        operands.push(operate(a, b, op));
    }
    return operands.pop();
}

int precedence(char op) {
    switch(op) {
        case '-':
          return 1;
        case '+':
            return 2;
        case '*':
          return 3;
        // case '/':
        //     return 4;
        // case '^':
        //   return 5;
        // Add more cases for other operators as needed
        default:
            return 0; // Handle invalid operator
    }
}

void setup() {
    Serial.begin(115200);
    // Serial.begin(9600);
    // espSerial.begin(9600);
    pinMode(A0, OUTPUT);
    pinMode(A1, OUTPUT);
    pinMode(A2, OUTPUT);
    pinMode(A3, OUTPUT);
    pinMode(A4, OUTPUT);
    pinMode(A5, OUTPUT);
    pinMode(A6, INPUT);
}

void loop() {
  String expression;
  Serial.println("Uploaded");
  delay(1000);
  if (Serial.available()) { 
    expression = Serial.readStringUntil('\n');  // Process the received expression here 
    Serial.println("Received expression: " + expression); // we will get expression from wifi
  }
    double result = evaluateExpression(expression);
    Serial.print("Result: ");
    Serial.println(result);
}
